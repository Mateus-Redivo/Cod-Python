# GUIA DE ESTUDOS: ALGORITMOS EM PYTHON

--------------------------------------------------------------------------------

## 1. MATRIZES EM PYTHON
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Criação de matrizes usando listas de listas
- Acesso aos elementos
- Vantagens e desvantagens das matrizes em Python

EXERCÍCIOS PRÁTICOS:
1) Crie uma matriz 4x4 e preencha-a com valores de 1 a 16. Imprima a matriz formatada na tela.
2) Escreva uma função que transponha uma matriz (troque linhas por colunas).

--------------------------------------------------------------------------------

## 2. DIAGONAIS DE MATRIZES
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Diagonal principal (elementos onde índice linha = índice coluna)
- Diagonal secundária (elementos onde linha + coluna = ordem-1)
- Operações com diagonais

EXERCÍCIOS PRÁTICOS:
1) Crie uma função que retorne a soma dos elementos da diagonal principal.
2) Crie uma função que retorne a soma dos elementos da diagonal secundária.
--------------------------------------------------------------------------------

## 3. OPERAÇÕES COM LISTAS
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Soma de elementos
- Percorrendo listas
- Métodos integrados vs. implementação manual

EXERCÍCIOS PRÁTICOS:
1) Escreva uma função que calcule a média dos valores de uma lista.
2) Implemente uma função que multiplique todos os elementos de uma lista por um valor.
3) Crie uma função que filtre apenas os números pares de uma lista.

--------------------------------------------------------------------------------

## 4. MODULARIZAÇÃO DE PROGRAMAS
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Princípios de modularização
- Funções e parâmetros
- Escopo de variáveis

EXERCÍCIOS PRÁTICOS:
1) Crie um programa modularizado para gerenciar uma lista de tarefas, com funções
   separadas para adicionar, remover e listar tarefas.
2) Implemente um conversor de moedas usando funções independentes para cada tipo de conversão.
3) Desenvolva um jogo de adivinhação modularizado, com funções para gerar número aleatório,
   verificar palpite e controlar o fluxo do jogo.

--------------------------------------------------------------------------------

## 5. MANIPULAÇÃO DE ELEMENTOS EM MATRIZES
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Acesso por índices [linha][coluna]
- Modificação de elementos específicos
- Atualização de matrizes

EXERCÍCIOS PRÁTICOS:
1) Crie uma matriz 3x3 e substitua todos os elementos da borda por zeros.
3) Desenvolva um programa que receba coordenadas e um valor, e atualize esse elemento na matriz.

--------------------------------------------------------------------------------

## 6. ESTRUTURAS CONDICIONAIS EM PYTHON
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- if-elif-else
- match-case (Python 3.10+)
- Casos de uso adequados para cada estrutura

EXERCÍCIOS PRÁTICOS:
1) Crie um programa que classifique números em categorias (positivo/negativo/zero) usando if-elif.
2) Implemente um menu de opções usando match-case.
3) Desenvolva um conversor de notas (A, B, C, D, F) para valores numéricos usando
   ambas as estruturas e compare-as.

--------------------------------------------------------------------------------

## 7. LIST COMPREHENSION
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Sintaxe básica
- Filtragem com condicionais
- Vantagens em termos de legibilidade e desempenho

EXERCÍCIOS PRÁTICOS:
1) Use list comprehension para criar uma lista com os quadrados dos números de 1 a 20.

--------------------------------------------------------------------------------

## 8. TRATAMENTO DE ERROS
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Blocos try-except
- Tipos de exceções
- Captura de exceções específicas

EXERCÍCIOS PRÁTICOS:
1) Crie um programa de divisão que trate a divisão por zero
3) Desenvolva uma função que converta texto em número, tratando exceções de formatação inválida.

--------------------------------------------------------------------------------

## 9. VALORES MÍNIMOS E MÁXIMOS EM MATRIZES
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Algoritmos de busca de mínimo e máximo
- Iteração por linhas/colunas
- Implementação sem funções prontas

EXERCÍCIOS PRÁTICOS:
1) Crie uma função que encontre o menor e maior valor de uma matriz inteira.
2) Implemente uma função que identifique a coluna com a maior soma em uma matriz.

--------------------------------------------------------------------------------

## 10. VALIDAÇÃO DE ENTRADA DE USUÁRIO
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Segurança de dados
- Tipos comuns de validação
- Ciclos de entrada e verificação

EXERCÍCIOS PRÁTICOS:
1) Crie um programa que valide se a entrada é um número inteiro entre 1 e 100.
2) Implemente uma validação de formato para um e-mail (deve conter @ e um domínio válido).
3) Desenvolva um sistema que valide entrada de CPF, verificando o formato e os dígitos verificadores.

--------------------------------------------------------------------------------

DICAS DE ESTUDO:
- Revisar os conceitos teóricos primeiro
- Resolver os exercícios manualmente
- Implementar as soluções em Python
- Testar com diferentes valores de entrada
- Revisar e otimizar seu código

--------------------------------------------------------------------------------
