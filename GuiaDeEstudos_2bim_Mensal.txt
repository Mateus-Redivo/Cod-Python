# GUIA DE ESTUDOS: ALGORITMOS EM PYTHON

--------------------------------------------------------------------------------

## 1. MATRIZES EM PYTHON
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Criação de matrizes usando listas de listas
- Acesso aos elementos
- Vantagens e desvantagens das matrizes em Python

EXERCÍCIOS PRÁTICOS:
1) Crie uma matriz 4x4 e preencha-a com valores de 1 a 16. Imprima a matriz formatada na tela.

def criar_matriz_4x4():
    matriz = []
    valor = 1
    for i in range(4):
        linha = []
        for j in range(4):
            linha.append(valor)
            valor += 1
        matriz.append(linha)
    
    # Imprimir matriz formatada
    for linha in matriz:
        for elemento in linha:
            print(f"{elemento:2d}", end=" ")
        print()
    
    return matriz

# Teste
print("Matriz 4x4:")
matriz_4x4 = criar_matriz_4x4()

--------------------------------------------------------------------------------

## 2. DIAGONAIS DE MATRIZES
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Diagonal principal (elementos onde índice linha = índice coluna)
- Diagonal secundária (elementos onde linha + coluna = ordem-1)
- Operações com diagonais

EXERCÍCIOS PRÁTICOS:
1) Crie uma função que retorne a soma dos elementos da diagonal principal.
2) Crie uma função que retorne a soma dos elementos da diagonal secundária.

# 1) Soma dos elementos da diagonal principal
def soma_diagonal_principal(matriz):
    soma = 0
    for i in range(len(matriz)):
        soma += matriz[i][i]
    return soma

# 2) Soma dos elementos da diagonal secundária
def soma_diagonal_secundaria(matriz):
    soma = 0
    n = len(matriz)
    for i in range(n):
        soma += matriz[i][n-1-i]
    return soma

# Teste com a matriz criada anteriormente
print("\nSoma da diagonal principal:", soma_diagonal_principal(matriz_4x4))
print("Soma da diagonal secundária:", soma_diagonal_secundaria(matriz_4x4))
--------------------------------------------------------------------------------

## 3. OPERAÇÕES COM LISTAS
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Soma de elementos
- Percorrendo listas
- Métodos integrados vs. implementação manual

EXERCÍCIOS PRÁTICOS:
1) Escreva uma função que calcule a média dos valores de uma lista.
2) Implemente uma função que multiplique todos os elementos de uma lista por um valor.
3) Crie uma função que filtre apenas os números pares de uma lista.

# 1) Função que calcula a média dos valores de uma lista
def calcular_media(lista):
    if not lista:
        return 0
    return sum(lista) / len(lista)

# 2) Função que multiplica todos os elementos por um valor
def multiplicar_elementos(lista, multiplicador):
    return [item * multiplicador for item in lista]

# 3) Função que filtra números pares
def filtrar_pares(lista):
    return [num for num in lista if num % 2 == 0]

# Testes
lista_exemplo = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("\nLista exemplo:", lista_exemplo)
print("Média dos valores:", calcular_media(lista_exemplo))
print("Lista multiplicada por 2:", multiplicar_elementos(lista_exemplo, 2))
print("Apenas números pares:", filtrar_pares(lista_exemplo))
--------------------------------------------------------------------------------

## 4. MODULARIZAÇÃO DE PROGRAMAS
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Princípios de modularização
- Funções e parâmetros
- Escopo de variáveis

EXERCÍCIOS PRÁTICOS:
1) Crie um programa modularizado para gerenciar uma lista de tarefas, com funções
   separadas para adicionar, remover e listar tarefas.
2) Implemente um conversor de moedas usando funções independentes para cada tipo de conversão.
3) Desenvolva um jogo de adivinhação modularizado, com funções para gerar número aleatório,
   verificar palpite e controlar o fluxo do jogo.

   # 1) Programa modularizado para gerenciar lista de tarefas
def adicionar_tarefa(tarefas, nova_tarefa):
    tarefas.append(nova_tarefa)
    print(f"Tarefa '{nova_tarefa}' adicionada com sucesso!")
    return tarefas

def remover_tarefa(tarefas, indice):
    if 0 <= indice < len(tarefas):
        tarefa_removida = tarefas.pop(indice)
        print(f"Tarefa '{tarefa_removida}' removida com sucesso!")
    else:
        print("Índice inválido!")
    return tarefas

def listar_tarefas(tarefas):
    if not tarefas:
        print("Lista de tarefas vazia!")
        return
    
    print("\n=== LISTA DE TAREFAS ===")
    for i, tarefa in enumerate(tarefas):
        print(f"{i+1}. {tarefa}")
    print("======================")

# 2) Conversor de moedas
def real_para_dolar(valor, cotacao=5.0):
    return valor / cotacao

def dolar_para_real(valor, cotacao=5.0):
    return valor * cotacao

def euro_para_real(valor, cotacao=5.5):
    return valor * cotacao

def real_para_euro(valor, cotacao=5.5):
    return valor / cotacao

# 3) Jogo de adivinhação modularizado
import random

def gerar_numero_aleatorio(min_val=1, max_val=100):
    return random.randint(min_val, max_val)

def verificar_palpite(palpite, numero_secreto):
    if palpite < numero_secreto:
        return "maior"
    elif palpite > numero_secreto:
        return "menor"
    else:
        return "igual"

def jogo_adivinhacao():
    numero_secreto = gerar_numero_aleatorio(1, 100)
    tentativas = 0
    max_tentativas = 7
    
    print("=== JOGO DE ADIVINHAÇÃO ===")
    print(f"Tente adivinhar o número entre 1 e 100 em {max_tentativas} tentativas!")
    
    while tentativas < max_tentativas:
        try:
            palpite = int(input("Seu palpite: "))
            tentativas += 1
            
            resultado = verificar_palpite(palpite, numero_secreto)
            if resultado == "igual":
                print(f"Parabéns! Você acertou em {tentativas} tentativas!")
                return True
            elif resultado == "maior":
                print(f"Tente um número MAIOR! Tentativas restantes: {max_tentativas - tentativas}")
            else:
                print(f"Tente um número MENOR! Tentativas restantes: {max_tentativas - tentativas}")
                
        except ValueError:
            print("Por favor, digite um número válido!")
    
    print(f"Game over! O número secreto era {numero_secreto}.")
    return False

# Exemplo de uso do gerenciador de tarefas
tarefas = []
tarefas = adicionar_tarefa(tarefas, "Estudar Python")
tarefas = adicionar_tarefa(tarefas, "Fazer compras")
listar_tarefas(tarefas)
tarefas = remover_tarefa(tarefas, 0)
listar_tarefas(tarefas)

# Exemplo de uso do conversor de moedas
print("\nConversor de moedas:")
print(f"100 reais em dólares: ${real_para_dolar(100):.2f}")
print(f"20 dólares em reais: R${dolar_para_real(20):.2f}")
print(f"50 euros em reais: R${euro_para_real(50):.2f}")

# Para jogar o jogo de adivinhação, descomente a linha abaixo
# jogo_adivinhacao()

--------------------------------------------------------------------------------

## 5. MANIPULAÇÃO DE ELEMENTOS EM MATRIZES
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Acesso por índices [linha][coluna]
- Modificação de elementos específicos
- Atualização de matrizes

EXERCÍCIOS PRÁTICOS:
1) Crie uma matriz 3x3 e substitua todos os elementos da borda por zeros.
3) Desenvolva um programa que receba coordenadas e um valor, e atualize esse elemento na matriz.

# 1) Criar matriz 3x3 e substituir elementos da borda por zeros
def criar_matriz_com_borda_zero():
    # Criar matriz 3x3
    matriz = []
    valor = 1
    for i in range(3):
        linha = []
        for j in range(3):
            linha.append(valor)
            valor += 1
        matriz.append(linha)
    
    print("Matriz original:")
    for linha in matriz:
        for elemento in linha:
            print(f"{elemento:2d}", end=" ")
        print()
    
    # Substituir elementos da borda por zeros
    for i in range(3):
        for j in range(3):
            if i == 0 or i == 2 or j == 0 or j == 2:
                matriz[i][j] = 0
    
    print("\nMatriz com bordas zeradas:")
    for linha in matriz:
        for elemento in linha:
            print(f"{elemento:2d}", end=" ")
        print()
    
    return matriz

# 3) Programa para atualizar elemento na matriz com base em coordenadas
def atualizar_elemento_matriz(matriz, linha, coluna, valor):
    if 0 <= linha < len(matriz) and 0 <= coluna < len(matriz[0]):
        matriz[linha][coluna] = valor
        print(f"Elemento na posição [{linha},{coluna}] atualizado para {valor}")
    else:
        print("Coordenadas inválidas!")
    
    # Mostrar matriz atualizada
    print("\nMatriz atualizada:")
    for l in matriz:
        for elemento in l:
            print(f"{elemento:2d}", end=" ")
        print()
    
    return matriz

# Testes
matriz_bordas = criar_matriz_com_borda_zero()
matriz_bordas = atualizar_elemento_matriz(matriz_bordas, 1, 1, 9)  # Atualiza o centro para 9
--------------------------------------------------------------------------------

## 6. ESTRUTURAS CONDICIONAIS EM PYTHON
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- if-elif-else
- match-case (Python 3.10+)
- Casos de uso adequados para cada estrutura

EXERCÍCIOS PRÁTICOS:
1) Crie um programa que classifique números em categorias (positivo/negativo/zero) usando if-elif.
2) Implemente um menu de opções usando match-case.
3) Desenvolva um conversor de notas (A, B, C, D, F) para valores numéricos usando
   ambas as estruturas e compare-as.

   # 1) Classificar números em categorias com if-elif
def classificar_numero(numero):
    if numero > 0:
        return "positivo"
    elif numero < 0:
        return "negativo"
    else:
        return "zero"

# 2) Menu de opções usando match-case (Python 3.10+)
def menu_opcoes(opcao):
    match opcao:
        case 1:
            return "Você escolheu Cadastrar"
        case 2:
            return "Você escolheu Consultar"
        case 3:
            return "Você escolheu Atualizar"
        case 4:
            return "Você escolheu Excluir"
        case 5:
            return "Você escolheu Sair"
        case _:
            return "Opção inválida"

# 3) Conversor de notas para valores numéricos
def nota_para_valor_if_elif(nota):
    if nota == "A":
        return 10
    elif nota == "B":
        return 8
    elif nota == "C":
        return 6
    elif nota == "D":
        return 4
    elif nota == "F":
        return 0
    else:
        return "Nota inválida"

def nota_para_valor_match(nota):
    match nota:
        case "A":
            return 10
        case "B":
            return 8
        case "C":
            return 6
        case "D":
            return 4
        case "F":
            return 0
        case _:
            return "Nota inválida"

# Testes
print("\nClassificação de números:")
numeros = [10, -5, 0]
for num in numeros:
    print(f"{num} é {classificar_numero(num)}")

print("\nMenu de opcões:")
for i in range(1, 7):
    print(f"Opção {i}: {menu_opcoes(i)}")

print("\nConversão de notas:")
notas = ["A", "B", "C", "D", "F", "X"]
for nota in notas:
    print(f"Nota {nota}: {nota_para_valor_if_elif(nota)} (if-elif) / {nota_para_valor_match(nota)} (match)")

--------------------------------------------------------------------------------

## 7. LIST COMPREHENSION
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Sintaxe básica
- Filtragem com condicionais
- Vantagens em termos de legibilidade e desempenho

EXERCÍCIOS PRÁTICOS:
1) Use list comprehension para criar uma lista com os quadrados dos números de 1 a 20.

# 1) List comprehension para criar lista com quadrados dos números de 1 a 20
def quadrados_ate_20():
    quadrados = [i**2 for i in range(1, 21)]
    return quadrados

# Teste
print("\nQuadrados de 1 a 20:", quadrados_ate_20())
--------------------------------------------------------------------------------

## 8. TRATAMENTO DE ERROS
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Blocos try-except
- Tipos de exceções
- Captura de exceções específicas

EXERCÍCIOS PRÁTICOS:
1) Crie um programa de divisão que trate a divisão por zero
3) Desenvolva uma função que converta texto em número, tratando exceções de formatação inválida.

# 1) Programa de divisão que trata divisão por zero
def divisao_segura(a, b):
    try:
        resultado = a / b
        return resultado
    except ZeroDivisionError:
        return "Erro: Divisão por zero não permitida"
    except Exception as e:
        return f"Erro inesperado: {e}"

# 3) Função para converter texto em número com tratamento de exceções
def converter_para_numero(texto):
    try:
        # Tenta converter para int primeiro
        return int(texto)
    except ValueError:
        try:
            # Se falhar, tenta converter para float
            return float(texto)
        except ValueError:
            return "Erro: Não foi possível converter para número"

# Testes
print("\nDivisão segura:")
print("10 / 2 =", divisao_segura(10, 2))
print("10 / 0 =", divisao_segura(10, 0))

print("\nConversão de texto para número:")
entradas = ["123", "45.67", "abc", "123.45.67"]
for entrada in entradas:
    print(f"'{entrada}' → {converter_para_numero(entrada)}")
--------------------------------------------------------------------------------

## 9. VALORES MÍNIMOS E MÁXIMOS EM MATRIZES
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Algoritmos de busca de mínimo e máximo
- Iteração por linhas/colunas
- Implementação sem funções prontas

EXERCÍCIOS PRÁTICOS:
1) Crie uma função que encontre o menor e maior valor de uma matriz inteira.
2) Implemente uma função que identifique a coluna com a maior soma em uma matriz.

# 1) Encontrar menor e maior valor de uma matriz
def encontrar_min_max_matriz(matriz):
    # Inicializa com o primeiro elemento da matriz
    if not matriz or not matriz[0]:
        return None, None
    
    min_val = max_val = matriz[0][0]
    
    for linha in matriz:
        for elemento in linha:
            if elemento < min_val:
                min_val = elemento
            if elemento > max_val:
                max_val = elemento
    
    return min_val, max_val

# 2) Identificar coluna com maior soma
def coluna_maior_soma(matriz):
    if not matriz or not matriz[0]:
        return -1
    
    n_linhas = len(matriz)
    n_colunas = len(matriz[0])
    
    maior_soma = float('-inf')
    coluna_maior = -1
    
    for j in range(n_colunas):
        soma = 0
        for i in range(n_linhas):
            soma += matriz[i][j]
        
        if soma > maior_soma:
            maior_soma = soma
            coluna_maior = j
    
    return coluna_maior, maior_soma

# Criar uma matriz de teste
def criar_matriz_teste():
    return [
        [4, 2, 8],
        [9, 5, 1],
        [3, 7, 6]
    ]

# Testes
matriz_teste = criar_matriz_teste()
print("\nMatriz de teste:")
for linha in matriz_teste:
    print(linha)

min_val, max_val = encontrar_min_max_matriz(matriz_teste)
print(f"Valor mínimo: {min_val}")
print(f"Valor máximo: {max_val}")

col_idx, soma = coluna_maior_soma(matriz_teste)
print(f"Coluna com maior soma: {col_idx} (índice 0-based), Soma: {soma}")
--------------------------------------------------------------------------------

## 10. VALIDAÇÃO DE ENTRADA DE USUÁRIO
--------------------------------------------------------------------------------
CONCEITOS-CHAVE:
- Segurança de dados
- Tipos comuns de validação
- Ciclos de entrada e verificação

EXERCÍCIOS PRÁTICOS:
1) Crie um programa que valide se a entrada é um número inteiro entre 1 e 100.
2) Implemente uma validação de formato para um e-mail (deve conter @ e um domínio válido).
3) Desenvolva um sistema que valide entrada de CPF, verificando o formato e os dígitos verificadores.

# 1) Validar se entrada é um número inteiro entre 1 e 100
def validar_inteiro_1_100(entrada):
    try:
        numero = int(entrada)
        if 1 <= numero <= 100:
            return True, numero
        else:
            return False, "O número deve estar entre 1 e 100"
    except ValueError:
        return False, "Entrada inválida. Digite um número inteiro."

# 2) Validar formato de e-mail
def validar_email(email):
    # Verificação simples: deve conter @ e pelo menos um ponto após @
    if "@" not in email:
        return False, "E-mail deve conter @"
    
    partes = email.split("@")
    if len(partes) != 2 or not partes[0] or not partes[1]:
        return False, "Formato de e-mail inválido"
    
    if "." not in partes[1]:
        return False, "Domínio inválido (deve conter '.')"
    
    dominio = partes[1].split(".")[-1]
    if not dominio or len(dominio) < 2:
        return False, "Extensão de domínio inválida"
    
    return True, email

# 3) Validar CPF
def validar_cpf(cpf):
    # Remove caracteres não numéricos
    cpf = ''.join(c for c in cpf if c.isdigit())
    
    # Verifica se tem 11 dígitos
    if len(cpf) != 11:
        return False, "CPF deve ter 11 dígitos"
    
    # Verifica se todos os dígitos são iguais (caso inválido)
    if cpf == cpf[0] * 11:
        return False, "CPF inválido: todos os dígitos iguais"
    
    # Validação do primeiro dígito verificador
    soma = 0
    for i in range(9):
        soma += int(cpf[i]) * (10 - i)
    resto = soma % 11
    digito1 = 11 - resto if resto > 1 else 0
    
    if digito1 != int(cpf[9]):
        return False, "CPF inválido: primeiro dígito verificador incorreto"
    
    # Validação do segundo dígito verificador
    soma = 0
    for i in range(10):
        soma += int(cpf[i]) * (11 - i)
    resto = soma % 11
    digito2 = 11 - resto if resto > 1 else 0
    
    if digito2 != int(cpf[10]):
        return False, "CPF inválido: segundo dígito verificador incorreto"
    
    return True, f"{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}"

# Testes
print("\nValidação de números inteiros:")
entradas = ["50", "0", "101", "abc"]
for entrada in entradas:
    valido, resultado = validar_inteiro_1_100(entrada)
    print(f"'{entrada}' → {'Válido: ' + str(resultado) if valido else 'Inválido: ' + resultado}")

print("\nValidação de e-mails:")
emails = ["usuario@dominio.com", "sem_arroba.com", "usuario@", "@dominio.com", "usuario@dominio"]
for email in emails:
    valido, resultado = validar_email(email)
    print(f"'{email}' → {'Válido' if valido else 'Inválido: ' + resultado}")

print("\nValidação de CPF:")
cpfs = ["12345678909", "111.111.111-11", "123.456.789-00"]
for cpf in cpfs:
    valido, resultado = validar_cpf(cpf)
    print(f"'{cpf}' → {'Válido: ' + resultado if valido else 'Inválido: ' + resultado}")
--------------------------------------------------------------------------------

DICAS DE ESTUDO:
- Revisar os conceitos teóricos primeiro
- Resolver os exercícios manualmente
- Implementar as soluções em Python
- Testar com diferentes valores de entrada
- Revisar e otimizar seu código

--------------------------------------------------------------------------------
